{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"model_imp_ AED - Draft7 - 25GB GPU","provenance":[{"file_id":"1kbMq-1YlDwUY5JZkIpj4ewZp1g7cBzLM","timestamp":1655388625907},{"file_id":"1s2qE9Fxt-TztkxE7jTsNZEiQWgHWVVd8","timestamp":1596086706742},{"file_id":"1sLPKkZksVQFtv-sbOqzn1YBZiTEONBi8","timestamp":1595309540002},{"file_id":"13Nwl1PsttGsD2E2qKLq1GQLzGqIr_RzT","timestamp":1594631940165},{"file_id":"1n5Sja19qsxFZmoqRrsLg2dr99B2AR_oz","timestamp":1594274873055},{"file_id":"1USduyCzwaDelrw4A4VTOIRE9WYeYDSYl","timestamp":1591353922182},{"file_id":"1ESkdqqqJyp54a_sEzAPHYBIwza5qiJG_","timestamp":1591353717509}],"collapsed_sections":[],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"4XI6-wiaUxLA"},"source":["**RNN LSTM BiLSTM**"]},{"cell_type":"code","metadata":{"id":"ck3xM16AM0-p","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655896196600,"user_tz":-360,"elapsed":6687,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"cf483311-0739-41df-fb82-5f58f59e118d"},"source":["!pip install BnPReprocessing\n","# !pip install bltk\n","# !pip install BnLemma"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting BnPReprocessing\n","  Downloading BnPreprocessing-2.9-py3-none-any.whl (6.7 kB)\n","Installing collected packages: BnPReprocessing\n","Successfully installed BnPReprocessing-2.9\n"]}]},{"cell_type":"code","source":["%%time\n","import os\n","from glob import glob\n","import numpy as np\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","import pandas as pd\n","import seaborn as sns\n","import re\n","import nltk\n","import json\n","from sklearn.preprocessing import MultiLabelBinarizer\n","from sklearn.metrics import confusion_matrix\n","from sklearn.metrics import classification_report \n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.linear_model import SGDClassifier\n","from sklearn.naive_bayes import MultinomialNB\n","from sklearn.ensemble import VotingClassifier\n","from sklearn.ensemble import BaggingClassifier\n","from sklearn.ensemble import AdaBoostClassifier, RandomForestClassifier, ExtraTreesClassifier\n","from sklearn.svm import SVC\n","from sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score,roc_auc_score\n","from sklearn.metrics import average_precision_score,roc_auc_score, roc_curve, precision_recall_curve\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","np.random.seed(42)\n","import nltk\n","nltk.download('punkt')\n","from nltk.corpus import stopwords\n","from nltk.tokenize import word_tokenize\n","from nltk.tokenize import ToktokTokenizer\n","import nltk, string, re, spacy,unicodedata, random\n","from bs4 import BeautifulSoup\n","import warnings\n","warnings.filterwarnings('ignore')\n","### Pretrained Word Embeddings\n","\n","folder_path = \"/content/drive/MyDrive/mode_imp_AED 25GPU/\""],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6lQPkMg_p9LA","executionInfo":{"status":"ok","timestamp":1655896208333,"user_tz":-360,"elapsed":9425,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"3197b0a7-a5a9-4352-f0bb-56e80f30e266"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Unzipping tokenizers/punkt.zip.\n"]},{"output_type":"stream","name":"stdout","text":["CPU times: user 4.84 s, sys: 766 ms, total: 5.6 s\n","Wall time: 9.69 s\n"]}]},{"cell_type":"code","metadata":{"id":"1sIIpVSsU1Mj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655896229872,"user_tz":-360,"elapsed":21550,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"d46a89b9-cfcb-4e8d-9581-139858592801"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"markdown","metadata":{"id":"j9_dRpBa1mPR"},"source":["# 1 . Initial and Fundamental Steps"]},{"cell_type":"markdown","metadata":{"id":"j6eft3YlzMxO"},"source":["### 1.1 Load data and packages"]},{"cell_type":"code","metadata":{"id":"wqJjJAXDNZNI"},"source":["import pandas as pd\n","import regex"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"v2AvgyfcNrI3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655896233252,"user_tz":-360,"elapsed":487,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"b4587108-5816-4819-b948-c037ff2fde47"},"source":["df1 = pd.read_excel('/content/drive/MyDrive/mode_imp_AED 25GPU/be_data_no_un_combined.xlsx')\n","print(\"total {} data\".format(len(df1)))\n","# df2 = pd.read_csv('fear.csv')\n","# df1.head(10) # to randomly pickup some data"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["total 5067 data\n"]}]},{"cell_type":"code","metadata":{"id":"S7dKeSaSEInc"},"source":["# df1 = pd.read_csv('5743_data.csv')\n","# df2 = pd.read_csv('fear.csv')\n","# df3 = pd.read_csv('surprise.csv')\n","# df4 = pd.read_csv('anger.csv')\n","# df5 = pd.read_csv('joy.csv')\n","# df6 = pd.read_csv('sadness.csv')\n","# df7 = pd.read_csv('disgust_own.csv')\n","# df8 = pd.read_csv('5_surprise.csv')\n","# df9 = pd.read_csv('5_disgust.csv')\n","# df10 = pd.read_csv('6_disgust.csv')\n","# df11 = pd.read_csv('6_fear.csv')\n","# df12 = pd.read_csv('6_anger.csv')\n","# df13 = pd.read_csv('6_sadness.csv')\n","\n","\n","# df = pd.concat([df1, df2, df3, df4, df5, df6,df7,df7],ignore_index=True)\n","# df"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"qjsr4fLnZEgH","colab":{"base_uri":"https://localhost:8080/","height":424},"executionInfo":{"status":"ok","timestamp":1655896233254,"user_tz":-360,"elapsed":8,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"66abc885-89df-4240-8e51-1ebecb6d5d5e"},"source":["df = pd.read_excel('/content/drive/MyDrive/mode_imp_AED 25GPU/be_data_no_un_combined.xlsx')\n","df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        Label                                               Text\n","0     Disgust   Dakhachish ai to tui svf are chala..to jeet d...\n","1     Disgust  Romantic comedy te je kikore eto vulgar jinish...\n","2     Sadness  Shokal thake burger r grill khaite mon chai bu...\n","3         Joy   jakhon dekhbi banglar chhele-meye banglay par...\n","4     Disgust  Mymensingh er manush eto kharap kn : ( na obos...\n","...       ...                                                ...\n","5062    Anger  jibon tai nosto holo tr pallay pore kn je acce...\n","5063    Anger  my brother is lying to me that's makes me soo ...\n","5064    Anger  toke eto bar porte boshte bolar por o boshli n...\n","5065    Anger             chutir pore daraish pa kete rekhe dibo\n","5066    Anger              ki shob korteso amr matha gorom hocce\n","\n","[5067 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-6f818fb0-1947-4715-8ebc-1d771a03448c\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Label</th>\n","      <th>Text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Disgust</td>\n","      <td>Dakhachish ai to tui svf are chala..to jeet d...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Disgust</td>\n","      <td>Romantic comedy te je kikore eto vulgar jinish...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Sadness</td>\n","      <td>Shokal thake burger r grill khaite mon chai bu...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Joy</td>\n","      <td>jakhon dekhbi banglar chhele-meye banglay par...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Disgust</td>\n","      <td>Mymensingh er manush eto kharap kn : ( na obos...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>5062</th>\n","      <td>Anger</td>\n","      <td>jibon tai nosto holo tr pallay pore kn je acce...</td>\n","    </tr>\n","    <tr>\n","      <th>5063</th>\n","      <td>Anger</td>\n","      <td>my brother is lying to me that's makes me soo ...</td>\n","    </tr>\n","    <tr>\n","      <th>5064</th>\n","      <td>Anger</td>\n","      <td>toke eto bar porte boshte bolar por o boshli n...</td>\n","    </tr>\n","    <tr>\n","      <th>5065</th>\n","      <td>Anger</td>\n","      <td>chutir pore daraish pa kete rekhe dibo</td>\n","    </tr>\n","    <tr>\n","      <th>5066</th>\n","      <td>Anger</td>\n","      <td>ki shob korteso amr matha gorom hocce</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5067 rows × 2 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6f818fb0-1947-4715-8ebc-1d771a03448c')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-6f818fb0-1947-4715-8ebc-1d771a03448c button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-6f818fb0-1947-4715-8ebc-1d771a03448c');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","metadata":{"id":"9uT5YMF02C55"},"source":["### 1.2 Checking corresponding rows for Nan values"]},{"cell_type":"code","metadata":{"id":"6jwWWyHk0q8m","colab":{"base_uri":"https://localhost:8080/","height":49},"executionInfo":{"status":"ok","timestamp":1655762689477,"user_tz":-360,"elapsed":505,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"e2d6d900-5e48-46fd-81e7-69484fb85c60"},"source":["df[df.isna().any(axis=1)]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Empty DataFrame\n","Columns: [Label, Text]\n","Index: []"],"text/html":["\n","  <div id=\"df-eead91bd-7beb-4c6f-b978-a29054c4f1df\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Label</th>\n","      <th>Text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eead91bd-7beb-4c6f-b978-a29054c4f1df')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-eead91bd-7beb-4c6f-b978-a29054c4f1df button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-eead91bd-7beb-4c6f-b978-a29054c4f1df');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":8}]},{"cell_type":"markdown","metadata":{"id":"hdsgbpMU2RFo"},"source":["### 1.3 As only one row with NaN , dropping it"]},{"cell_type":"code","metadata":{"id":"yr1nhuAR1bNd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655735885823,"user_tz":-360,"elapsed":401,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"1154cf2f-dcfc-4c92-a6b9-2e6165d1cc13"},"source":["df = df.dropna()\n","print(\"total {} data\".format(len(df)))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["total 5067 data\n"]}]},{"cell_type":"code","metadata":{"id":"F6pstaJ45BIZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655735888756,"user_tz":-360,"elapsed":383,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"3d16eada-5f2b-421a-f14d-b726703e4a1a"},"source":["df.Label.value_counts()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Joy         1707\n","Sadness     1030\n","Disgust      958\n","Anger        630\n","Fear         444\n","Surprise     298\n","Name: Label, dtype: int64"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"iVuC8IFMwF9M"},"source":["#merging all anger and disgust\n","# df['classes'] = df['classes'].apply(lambda x: 'anger' if x=='disgust' else x)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"OPXjUE5fVYZJ","colab":{"base_uri":"https://localhost:8080/","height":218},"executionInfo":{"status":"ok","timestamp":1597900982280,"user_tz":-360,"elapsed":1205,"user":{"displayName":"AVISHEK DAS 1504018","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhU-j0wNDmKHB4Gpe2iUu9qEuJeC47SwpemJ5m05g=s64","userId":"01928616202271817774"}},"outputId":"451d81bb-d10d-413c-d370-e8a777a3ffde"},"source":["\n","# #merging all surprise and fear\n","# df['classes'] = df['classes'].apply(lambda x: 'surprise' if x=='fear' else x)\n","df['classes'] = df['classes'].apply(lambda x: 'negative' if x=='sadness' else x)\n","df['classes'] = df['classes'].apply(lambda x: 'positive' if x=='joy' else x)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"wDgBt3_o9ZX9","colab":{"base_uri":"https://localhost:8080/","height":402},"executionInfo":{"status":"ok","timestamp":1597900982281,"user_tz":-360,"elapsed":1043,"user":{"displayName":"AVISHEK DAS 1504018","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhU-j0wNDmKHB4Gpe2iUu9qEuJeC47SwpemJ5m05g=s64","userId":"01928616202271817774"}},"outputId":"ef10b13a-9d76-42ad-bdaa-45a297f08bdd"},"source":["# df = df[(df['classes'] == 'joy') | (df['classes'] == 'sadness') | (df['classes'] == 'anger')]\n","df = df[(df['classes'] == 'positive') | (df['classes'] == 'negative')]\n","df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>TEXT</th>\n","      <th>classes</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>benson এ একটা জোস জিনিশ বার করল! benson fine c...</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>ভাই রে ভাই....কিরণ দত্ত একটা চিজ....ভালোবাসা ভাই।</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>দাদা তোমাকে খুব ভালোবাসি, সবসময় তোমার ভিডিও দে...</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>ওভাই....কোন  অঞ্চলের বাংলা  ভাষা  ?? না মানে ...</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>তোরে কে আঘাত দিয়েই আসলেই রিসেন্টলি আঘাত পাইসো...</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>23888</th>\n","      <td>আমি নিজেকে অসহায় বোধ করছি আমি আপনার অসুস্থতার...</td>\n","      <td>negative</td>\n","    </tr>\n","    <tr>\n","      <th>23889</th>\n","      <td>আমি অনুমান করি যে এ সমস্ত কিছুই নির্বিঘ্নে প্র...</td>\n","      <td>negative</td>\n","    </tr>\n","    <tr>\n","      <th>23890</th>\n","      <td>আমি না বললে মিথ্যা বলার জন্য আমি করুণাময় বোধ করি</td>\n","      <td>negative</td>\n","    </tr>\n","    <tr>\n","      <th>23891</th>\n","      <td>আমি সাহায্য করতে পারি না তবে আমাদের এখানে আঁকা...</td>\n","      <td>negative</td>\n","    </tr>\n","    <tr>\n","      <th>23892</th>\n","      <td>আমি আগামীকাল সকালে এসএসএ পরীক্ষা দিচ্ছি আসন্ন ...</td>\n","      <td>negative</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>14890 rows × 2 columns</p>\n","</div>"],"text/plain":["                                                    TEXT   classes\n","0      benson এ একটা জোস জিনিশ বার করল! benson fine c...  positive\n","1      ভাই রে ভাই....কিরণ দত্ত একটা চিজ....ভালোবাসা ভাই।  positive\n","2      দাদা তোমাকে খুব ভালোবাসি, সবসময় তোমার ভিডিও দে...  positive\n","3       ওভাই....কোন  অঞ্চলের বাংলা  ভাষা  ?? না মানে ...  positive\n","4       তোরে কে আঘাত দিয়েই আসলেই রিসেন্টলি আঘাত পাইসো...  positive\n","...                                                  ...       ...\n","23888  আমি নিজেকে অসহায় বোধ করছি আমি আপনার অসুস্থতার...  negative\n","23889  আমি অনুমান করি যে এ সমস্ত কিছুই নির্বিঘ্নে প্র...  negative\n","23890  আমি না বললে মিথ্যা বলার জন্য আমি করুণাময় বোধ করি  negative\n","23891  আমি সাহায্য করতে পারি না তবে আমাদের এখানে আঁকা...  negative\n","23892  আমি আগামীকাল সকালে এসএসএ পরীক্ষা দিচ্ছি আসন্ন ...  negative\n","\n","[14890 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":24}]},{"cell_type":"code","metadata":{"id":"R5lSIicnwh6Z"},"source":["# df.classes.value_counts()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3qNlj0y5Vt_6"},"source":["# df = df.groupby('classes').apply(lambda x: x.sample(2295))\n","# df.classes.value_counts()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"A1KvlVs6_o-K"},"source":["### 1.4 Maping the classes to integer(standerd procedure)"]},{"cell_type":"code","metadata":{"id":"66uL-tWz8bWd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655896243373,"user_tz":-360,"elapsed":387,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"443e003c-97fc-4c25-98e8-a475d3f4bd04"},"source":["map_class = dict(zip(df.Label.astype(\"category\").cat.codes, df.Label))\n","print(map_class)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{1: 'Disgust', 4: 'Sadness', 3: 'Joy', 0: 'Anger', 5: 'Surprise', 2: 'Fear'}\n"]}]},{"cell_type":"code","metadata":{"id":"Be_IuyCP2YyW","colab":{"base_uri":"https://localhost:8080/","height":363},"executionInfo":{"status":"ok","timestamp":1655896243838,"user_tz":-360,"elapsed":6,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"8328cdee-c45e-4c57-d7ff-87a5331d08b8"},"source":["df.Label = df.Label.astype(\"category\").cat.codes\n","df.sample(10)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      Label                                               Text\n","4856      0  shotti kore bol dibi kina na hoy ekhoni kere nibo\n","952       1  Comic book er upor base kora ekta Movie was de...\n","3309      4  Bishal marpit holo Gari moore , besh mark khel...\n","179       5    Amio Dhanmondi theke ghure ashlm.Sakib Dhaka...\n","589       4  ami akhon football hoye gechi.. j jokhon mon c...\n","3768      4   Rater belai tomar amar thate jogra hotei pare...\n","800       3   jeet da jaya tomari is an awesome track . tra...\n","2687      1  Etotai kharap je critics der khub koshto kore ...\n","3789      4  Bekar time waste chara ar kichui holo na , one...\n","65        3   awesome movie khub valo project onk din por a..."],"text/html":["\n","  <div id=\"df-fd35ad3b-499a-49a5-acd9-34bac7d0accb\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Label</th>\n","      <th>Text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>4856</th>\n","      <td>0</td>\n","      <td>shotti kore bol dibi kina na hoy ekhoni kere nibo</td>\n","    </tr>\n","    <tr>\n","      <th>952</th>\n","      <td>1</td>\n","      <td>Comic book er upor base kora ekta Movie was de...</td>\n","    </tr>\n","    <tr>\n","      <th>3309</th>\n","      <td>4</td>\n","      <td>Bishal marpit holo Gari moore , besh mark khel...</td>\n","    </tr>\n","    <tr>\n","      <th>179</th>\n","      <td>5</td>\n","      <td>Amio Dhanmondi theke ghure ashlm.Sakib Dhaka...</td>\n","    </tr>\n","    <tr>\n","      <th>589</th>\n","      <td>4</td>\n","      <td>ami akhon football hoye gechi.. j jokhon mon c...</td>\n","    </tr>\n","    <tr>\n","      <th>3768</th>\n","      <td>4</td>\n","      <td>Rater belai tomar amar thate jogra hotei pare...</td>\n","    </tr>\n","    <tr>\n","      <th>800</th>\n","      <td>3</td>\n","      <td>jeet da jaya tomari is an awesome track . tra...</td>\n","    </tr>\n","    <tr>\n","      <th>2687</th>\n","      <td>1</td>\n","      <td>Etotai kharap je critics der khub koshto kore ...</td>\n","    </tr>\n","    <tr>\n","      <th>3789</th>\n","      <td>4</td>\n","      <td>Bekar time waste chara ar kichui holo na , one...</td>\n","    </tr>\n","    <tr>\n","      <th>65</th>\n","      <td>3</td>\n","      <td>awesome movie khub valo project onk din por a...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fd35ad3b-499a-49a5-acd9-34bac7d0accb')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-fd35ad3b-499a-49a5-acd9-34bac7d0accb button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-fd35ad3b-499a-49a5-acd9-34bac7d0accb');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":9}]},{"cell_type":"markdown","metadata":{"id":"iilG--KTMxNu"},"source":["# 2 . PreProcessing"]},{"cell_type":"code","metadata":{"id":"j6gGuCLFMokM"},"source":["# import BnPreprocessing as pp\n","# df['Text'] = df['Text'].apply(lambda x: pp.remove_punc(str(x)))\n","# df['Text'] = df['Text'].apply(lambda x: pp.remove_nonBangla(str(x)))\n","# df['Text'] = df['Text'].apply(lambda x: pp.remove_digits(str(x)))\n","# df['Text'] = df['Text'].apply(lambda x: pp.remove_emoticons(str(x)))\n","\n","# # df['TEXT'] = df['TEXT'].apply(pp.remove_sw)\n","# df.head(10)"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["'''\n","Text Cleaning\n","'''\n","def text_cleaning(row):\n","  # to remove HTML tags\n","  text = BeautifulSoup(row, 'html.parser').get_text()\n","  d = re.sub(r'(https|http)?:\\/\\/(\\w|\\.|\\/|\\?|\\=|\\&|\\%)*\\b', '', text, flags=re.MULTILINE) #This line is for removing url\n","  post = d.replace('\\n', '')\n","  post = post.replace('—', ' ')\n","  # to remove accented characters\n","  new_text = unicodedata.normalize('NFKD', post).encode('ascii', 'ignore').decode('utf-8', 'ignore')\n","  # to remove special characters and numbers\n","  # define the pattern to keep\n","  #pat = r'[^a-zA-z0-9.,!?/:;\\\"\\'\\s]' \n","  #text = re.sub(pat, '', new_text)\n","  #to remove punctuation\n","  text = ''.join([c for c in text if c not in string.punctuation])\n","  # to remove special characters\n","  pattern = r'^\\s*|\\s\\s*'\n","  text = re.sub(pattern, ' ', text).strip()\n","  # convert into lower case\n","  text = text.lower() \n","  # Stopword Removing\n","  tokenizer = ToktokTokenizer()\n","  # convert sentence into token of words\n","  tokens = tokenizer.tokenize(text)\n","  tokens = [token.strip() for token in tokens]\n","  # check in lowercase \n","  #t = [token for token in tokens if token.lower() not in stopword_list]\n","  #text = ' '.join(t) \n","  # Stemming\n","  #t = [stemming.stem(token) for token in tokens ]\n","  #text = ' '.join(t) \n","\n","  return text"],"metadata":{"id":"ibWrjLKRkqdX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_becodemixed_stop_words():\n","    #swdf1 = pd.read_csv(\"/content/drive/MyDrive/automated_tamil_text_classification-master/data/TamilNLP_TamilStopWords.txt\",  header=None) \n","    swdf2 = pd.read_csv(\"/content/drive/MyDrive/mode_imp_AED 25GPU/custom_becodemixed_stopwords.txt\",  header=None) \n","    #sw1 = swdf1[0].tolist()\n","    sw2 = swdf2[0].tolist()\n","    #tamil_stop_words = list(set(sw1 + sw2))\n","    becodemixed_stop_words = list(sw2)\n","    return becodemixed_stop_words"],"metadata":{"id":"2oEN3XIgk8gx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["becodemixed_stop_words = get_becodemixed_stop_words()\n","df['Texts'] = df['Text'].apply(lambda x: ' '.join([word for word in x.split() if word not in (becodemixed_stop_words)]))\n","\n","\n","\n","df['cleaned'] = df['Texts'].apply(text_cleaning)\n","\n","\n","\n","## Data samples after cleaning\n","print(\"Original Data:===\\n\",df.Text[0],\"\\nCleaned Data:===\\n\",df.cleaned[0],)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6mN3VXO6pjKr","executionInfo":{"status":"ok","timestamp":1655896254756,"user_tz":-360,"elapsed":1449,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"d13981d0-01e2-4b31-c6d7-4b33c29861e4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Original Data:===\n","  Dakhachish ai to tui svf are chala..to jeet dar collection to fake blban e to ... sir manush boka noi \n","Cleaned Data:===\n"," dakhachish tui svf are chalato jeet dar collection fake blban sir manush boka noi\n"]}]},{"cell_type":"code","metadata":{"id":"lmRV5iUj-cHo"},"source":["# def lemm(text):\n","#   import BnLemma as lm\n","#   bl = lm.Lemmatizer()\n","#   try:\n","#     return bl.lemma(text)\n","#   except:\n","#     return text\n","# df.TEXT = df.TEXT.apply(lemm)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DxoJGPspy_Er"},"source":["0: 'anger', \n","\n","1: 'disgust', \n","\n","2: 'fear', \n","\n","3: 'joy', \n","\n","4: 'sadness', \n","\n","5: 'surprise'"]},{"cell_type":"code","metadata":{"id":"Iifsku_Pq-66"},"source":["# len(df)-763+13\n","# df.loc[24950:24970]\n","# df[df.isna().any(axis=1)]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"acgkVEwNvRpA"},"source":["# 3 . Train Test Split"]},{"cell_type":"code","metadata":{"id":"LH37DPw1YAkT"},"source":["# df['classes'] = df['classes'].apply(lambda x: str(x))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-dZ_9SA0YF0z"},"source":["# from collections import Counter\n","# Counter(y_train), Counter(y_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_-yirl_SLsDd"},"source":["from sklearn.model_selection import train_test_split\n","\n","sentences = df['Text'].values\n","target = df['Label'].values\n","\n","sentences_train, sentences_test, y_train, y_test = train_test_split(\n","   sentences, target, test_size=0.2, random_state=1000)\n","\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","\n","def tokenizer(text):\n","  return text.split()\n","\n","# vectorizer = TfidfVectorizer(tokenizer = tokenizer, ngram_range=(1,2), max_df = 0.06, min_df = 0.0006)\n","vectorizer = TfidfVectorizer(tokenizer = tokenizer, ngram_range=(1,1))\n","vectorizer = vectorizer.fit(sentences_train)\n","X_train = vectorizer.transform(sentences_train)\n","X_test  = vectorizer.transform(sentences_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["sentences_train.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"apXagsk9PRKI","executionInfo":{"status":"ok","timestamp":1655898453884,"user_tz":-360,"elapsed":7,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"91d0d60d-f397-4e6f-cc5c-178cd2ae3bd4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(4053,)"]},"metadata":{},"execution_count":64}]},{"cell_type":"code","source":["y_train.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kZ1EwAr-PYKy","executionInfo":{"status":"ok","timestamp":1655898485297,"user_tz":-360,"elapsed":384,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"15f2a33f-fabc-4408-ee72-2a71a90cebd4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(4053,)"]},"metadata":{},"execution_count":65}]},{"cell_type":"code","metadata":{"id":"jDswrgzRdnOH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655898495603,"user_tz":-360,"elapsed":381,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"dd1f2e99-865c-4386-f6f3-d9b2c4169d1b"},"source":["X_train"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<4053x13252 sparse matrix of type '<class 'numpy.float64'>'\n","\twith 60752 stored elements in Compressed Sparse Row format>"]},"metadata":{},"execution_count":66}]},{"cell_type":"code","source":["X_train.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9peimvU7OD6K","executionInfo":{"status":"ok","timestamp":1655898497256,"user_tz":-360,"elapsed":3,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"8c73f73e-9d20-4350-ea67-57498534ee80"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(4053, 13252)"]},"metadata":{},"execution_count":67}]},{"cell_type":"code","source":["y_train.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tZTgWV7QP3zQ","executionInfo":{"status":"ok","timestamp":1655898613078,"user_tz":-360,"elapsed":6,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"13503f31-f7b8-4881-8a59-5871db6040f4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(4053,)"]},"metadata":{},"execution_count":74}]},{"cell_type":"code","source":["y_test.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3Fu4UuqCOI9K","executionInfo":{"status":"ok","timestamp":1655898598206,"user_tz":-360,"elapsed":3,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"75277871-0d5e-42f9-af86-a6a51b361c4e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1014,)"]},"metadata":{},"execution_count":73}]},{"cell_type":"code","metadata":{"id":"lBF7Yj2zwY41","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655898509422,"user_tz":-360,"elapsed":622,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"2dd37d96-d470-4c2a-fb38-e1eb082986a7"},"source":["map_class"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{0: 'Anger', 1: 'Disgust', 2: 'Fear', 3: 'Joy', 4: 'Sadness', 5: 'Surprise'}"]},"metadata":{},"execution_count":68}]},{"cell_type":"code","metadata":{"id":"qekvfRao0PBN"},"source":["def get_scores(y_test, y_pred):\n","  from sklearn.metrics import accuracy_score,f1_score, precision_score, recall_score\n","  # accuracy: (tp + tn) / (p + n)\n","  accuracy = accuracy_score(y_test, y_pred)\n","\n","  # f1: 2 tp / (2 tp + fp + fn)\n","  f1 = f1_score(y_test, y_pred,  average=None)\n","\n","  # precision:  tp / (tp + fp)\n","  precision = precision_score(y_test, y_pred,  average=None)\n","\n","  # recall:  tp / (tp + fn)\n","  recall = recall_score(y_test, y_pred,  average=None)\n","\n","  return {\n","      'accuracy':accuracy,\n","      'f1':f1, \n","      'precision':precision, \n","      'recall':recall\n","  }\n","\n","def get_score_table(y_test, y_pred, metrics=None, map_class=map_class):\n","    from prettytable import PrettyTable\n","\n","    if metrics is None : metrics = ['f1', 'precision', 'recall', 'accuracy']\n","    dc= get_scores(y_test, y_pred)\n","    if 'accuracy' in metrics:\n","      print('Accuracy: {}'.format(dc['accuracy']))\n","      metrics.remove('accuracy')\n","\n","    classes = list(set(df.Label.values))\n","\n","    t = PrettyTable(['class']+metrics)\n","    for i in range(len(map_class)):\n","        t.add_row([map_class[i]]+[dc[d][i] for d in metrics])\n","    print(t)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KJuNyP-ydJWx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655898519409,"user_tz":-360,"elapsed":2759,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"857d6156-9087-4867-c61e-270eff25799c"},"source":["from sklearn.linear_model import LogisticRegression\n","\n","classifier = LogisticRegression()\n","classifier.fit(X_train, y_train)\n","y_pred = classifier.predict(X_test)\n","get_score_table(y_test, y_pred)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.6055226824457594\n","+----------+--------------------+--------------------+--------------------+\n","|  class   |         f1         |     precision      |       recall       |\n","+----------+--------------------+--------------------+--------------------+\n","|  Anger   | 0.5463414634146342 | 0.835820895522388  | 0.4057971014492754 |\n","| Disgust  | 0.5356125356125356 | 0.5911949685534591 | 0.4895833333333333 |\n","|   Fear   | 0.7654320987654321 | 0.9841269841269841 | 0.6262626262626263 |\n","|   Joy    | 0.6925714285714285 | 0.5804597701149425 | 0.8583569405099151 |\n","| Sadness  | 0.5142857142857143 | 0.4900990099009901 | 0.5409836065573771 |\n","| Surprise |        0.0         |        0.0         |        0.0         |\n","+----------+--------------------+--------------------+--------------------+\n"]}]},{"cell_type":"code","metadata":{"id":"WSIYI7WcUnfz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655898522483,"user_tz":-360,"elapsed":381,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"4052309e-455d-4077-b319-6aa869dcc77b"},"source":["get_scores(y_test, y_pred)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'accuracy': 0.6055226824457594,\n"," 'f1': array([0.54634146, 0.53561254, 0.7654321 , 0.69257143, 0.51428571,\n","        0.        ]),\n"," 'precision': array([0.8358209 , 0.59119497, 0.98412698, 0.58045977, 0.49009901,\n","        0.        ]),\n"," 'recall': array([0.4057971 , 0.48958333, 0.62626263, 0.85835694, 0.54098361,\n","        0.        ])}"]},"metadata":{},"execution_count":71}]},{"cell_type":"code","metadata":{"id":"vzUf4NSM0QdQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655898528601,"user_tz":-360,"elapsed":4283,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"b00988ef-64e6-444f-d36f-d2890297df80"},"source":["from sklearn.svm import SVC\n","classifier = SVC(kernel = 'linear', random_state = 0)\n","classifier.fit(X_train, y_train)\n","y_pred = classifier.predict(X_test)\n","\n","get_score_table(y_test, y_pred)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.6203155818540433\n","+----------+---------------------+--------------------+---------------------+\n","|  class   |          f1         |     precision      |        recall       |\n","+----------+---------------------+--------------------+---------------------+\n","|  Anger   |  0.5663716814159292 | 0.7272727272727273 |  0.463768115942029  |\n","| Disgust  |  0.5271317829457365 | 0.5230769230769231 |       0.53125       |\n","|   Fear   |  0.8070175438596493 | 0.9583333333333334 |  0.696969696969697  |\n","|   Joy    |  0.7148194271481944 | 0.6377777777777778 |  0.8130311614730878 |\n","| Sadness  |  0.5364583333333334 | 0.5124378109452736 |  0.5628415300546448 |\n","| Surprise | 0.14035087719298245 |        0.5         | 0.08163265306122448 |\n","+----------+---------------------+--------------------+---------------------+\n"]}]},{"cell_type":"code","metadata":{"id":"n-8BN63z6YhE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655898651265,"user_tz":-360,"elapsed":1187,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"8ce0861d-6c53-4582-f150-25796fdc1a41"},"source":["from sklearn.naive_bayes import MultinomialNB\n","classifier = MultinomialNB()\n","classifier.fit(X_train.toarray(), y_train)\n","y_pred = classifier.predict(X_test.toarray())\n","\n","get_score_table(y_test, y_pred)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.46745562130177515\n","+----------+---------------------+---------------------+---------------------+\n","|  class   |          f1         |      precision      |        recall       |\n","+----------+---------------------+---------------------+---------------------+\n","|  Anger   | 0.25316455696202533 |         1.0         | 0.14492753623188406 |\n","| Disgust  | 0.37007874015748027 |  0.7580645161290323 | 0.24479166666666666 |\n","|   Fear   |  0.1834862385321101 |         1.0         | 0.10101010101010101 |\n","|   Joy    |  0.5902192242833052 | 0.42016806722689076 |  0.9915014164305949 |\n","| Sadness  | 0.34558823529411764 |  0.5280898876404494 |  0.2568306010928962 |\n","| Surprise |         0.0         |         0.0         |         0.0         |\n","+----------+---------------------+---------------------+---------------------+\n"]}]},{"cell_type":"markdown","metadata":{"id":"fHLpj8HPpACH"},"source":["# 6 . DNN Approach"]},{"cell_type":"markdown","metadata":{"id":"-Dgf8HiX0ZM4"},"source":["### 6.1 Defining necessary functions"]},{"cell_type":"code","metadata":{"id":"eeqKNFe2tH6u"},"source":["import matplotlib.pyplot as plt\n","plt.style.use('ggplot')\n","\n","def plot_history(history):\n","    acc = history['accuracy']\n","    val_acc = history['val_accuracy']\n","    loss = history['loss']\n","    val_loss = history['val_loss']\n","    x = range(1, len(acc) + 1)\n","\n","    plt.figure(figsize=(12, 5))\n","    plt.subplot(1, 2, 1)\n","    plt.plot(x, acc, 'b', label='Training acc')\n","    plt.plot(x, val_acc, 'r', label='Validation acc')\n","    plt.title('Training and validation accuracy')\n","    plt.legend()\n","    plt.subplot(1, 2, 2)\n","    plt.plot(x, loss, 'b', label='Training loss')\n","    plt.plot(x, val_loss, 'r', label='Validation loss')\n","    plt.title('Training and validation loss')\n","    plt.legend()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"RXSORinlL7Jc","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655898658397,"user_tz":-360,"elapsed":5,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"0051e050-4be3-4b0e-a9c3-851135545172"},"source":["from tensorflow.keras.utils import to_categorical\n","y_train = to_categorical(y_train)\n","y_test = to_categorical(y_test)\n","y_train.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(4053, 6)"]},"metadata":{},"execution_count":77}]},{"cell_type":"code","source":["y_train.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Jg7U5Zb0Oreu","executionInfo":{"status":"ok","timestamp":1655898660814,"user_tz":-360,"elapsed":410,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"3e4677b4-b0cf-455e-82db-01568d55184e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(4053, 6)"]},"metadata":{},"execution_count":78}]},{"cell_type":"code","source":["sentences_train.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3k5hMqU6OaIy","executionInfo":{"status":"ok","timestamp":1655898663510,"user_tz":-360,"elapsed":404,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"77ce95ab-e77f-49f4-eef7-15bd023a7871"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(4053,)"]},"metadata":{},"execution_count":79}]},{"cell_type":"code","metadata":{"id":"wz3ZWBhrUlcs","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655898665723,"user_tz":-360,"elapsed":380,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"4acd441e-3703-4f17-e495-83873ee5376c"},"source":["sentences_train"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['Franker moto akta scifiction , horror movie hisebe superhit .',\n","       ' Kopaler Ki dos . Tmr bolo na tai . Tumi tmr moner Kotha khule bola sekho dekhbe Jake J somoy jeta boler darkar seta bolte parbe .',\n","       ' Ganesh দেবতা nea tamasha koreche tai adalat তলব koreche , Allah nea kichu korle atokhone তলব na soja upore রওনা koria dito .',\n","       ...,\n","       ' ei Eid a tumar notun chomok ki ? You said that Dhumketu r First Look jokhon reveal hobe tokhon sobai chomke jabe & yes seriously amra',\n","       'keya re iss movie ko dekh kar dar jata hain,main to bohut bar dekh sakta hoon',\n","       'Last obdi effective holei to holo na ? And eta jithesto effective e chilo according to me .'],\n","      dtype=object)"]},"metadata":{},"execution_count":80}]},{"cell_type":"code","metadata":{"id":"pbWzT4qiPj1h"},"source":["from keras.models import Sequential\n","from keras import layers\n","import tensorflow as tf\n","import tensorflow \n","import numpy as np\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","\n","\n","vocab_size = 20000\n","embedding_dim = 35\n","max_length = 20\n","trunc_type = 'post'\n","padding_type = 'post'\n","oov_tok = '<OOV>'\n","training_portion = .8"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JYmb5zuc1HcH"},"source":["### 6.3 Design The layers and Fit the mdoel"]},{"cell_type":"code","metadata":{"id":"9kzJ7ZG79uTn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655898670077,"user_tz":-360,"elapsed":3,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"d89aa0b9-dc06-4b1f-885d-37ecd2ea176f"},"source":["tokenizer = Tokenizer(num_words = vocab_size, oov_token=oov_tok)\n","tokenizer.fit_on_texts(sentences_train)\n","word_index = tokenizer.word_index\n","dict(list(word_index.items())[0:10])"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'<OOV>': 1,\n"," 'ami': 9,\n"," 'e': 5,\n"," 'er': 4,\n"," 'je': 8,\n"," 'ki': 7,\n"," 'kore': 10,\n"," 'movie': 6,\n"," 'na': 2,\n"," 'ta': 3}"]},"metadata":{},"execution_count":82}]},{"cell_type":"code","metadata":{"id":"U_9nFrcFWINz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655898675857,"user_tz":-360,"elapsed":395,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"08687e02-5e36-417b-989b-d08dc3623877"},"source":["len(word_index)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["12604"]},"metadata":{},"execution_count":83}]},{"cell_type":"code","metadata":{"id":"xONTnJKxpKkc","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655898678623,"user_tz":-360,"elapsed":371,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"6c55dda3-51d7-4880-c5af-b4ea6f99a190"},"source":["train_sequences = tokenizer.texts_to_sequences(sentences_train)\n","print(train_sequences[10])"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[7, 47, 2346, 43, 253, 620, 399]\n"]}]},{"cell_type":"code","metadata":{"id":"odkJtFtKpahO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655898682322,"user_tz":-360,"elapsed":2,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"8a1e8e4f-c6b4-4e92-871c-bf72777dad00"},"source":["train_padded = pad_sequences(train_sequences, maxlen=max_length, padding=padding_type, truncating=trunc_type)\n","print(len(train_sequences[0]))\n","print(len(train_padded[0]))\n","\n","print(len(train_sequences[1]))\n","print(len(train_padded[1]))\n","\n","print(len(train_sequences[10]))\n","print(len(train_padded[10]))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["8\n","20\n","24\n","20\n","7\n","20\n"]}]},{"cell_type":"code","metadata":{"id":"ewbJeC3DWl5B","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655898684624,"user_tz":-360,"elapsed":405,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"ff104153-5794-4c66-8b2d-82b0c6fdb212"},"source":["print(train_padded[10])"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[   7   47 2346   43  253  620  399    0    0    0    0    0    0    0\n","    0    0    0    0    0    0]\n"]}]},{"cell_type":"code","source":["train_padded.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OukujbKYOP8J","executionInfo":{"status":"ok","timestamp":1655898687561,"user_tz":-360,"elapsed":422,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"c1660ce8-6805-4ed4-d755-166326fb92a2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(4053, 20)"]},"metadata":{},"execution_count":87}]},{"cell_type":"code","metadata":{"id":"kLtdFZaUWl2O"},"source":["validation_sequences = tokenizer.texts_to_sequences(sentences_test)\n","validation_padded = pad_sequences(validation_sequences, maxlen=max_length, padding=padding_type, truncating=trunc_type)\n","\n","# label_tokenizer = Tokenizer()\n","# label_tokenizer.fit_on_texts(df['classes'])\n","# training_label_seq = np.array(label_tokenizer.texts_to_sequences(y_train))\n","# validation_label_seq = np.array(label_tokenizer.texts_to_sequences(y_test))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Pn3NlYpyW-8m","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655898692664,"user_tz":-360,"elapsed":635,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"36bf4db8-61db-4166-f7de-ffee6fcbae53"},"source":["reverse_word_index = dict([(value, key) for (key, value) in word_index.items()])\n","\n","def decode_article(text):\n","    return ' '.join([reverse_word_index.get(i, '?') for i in text])\n","print(decode_article(train_padded[10]))\n","print('---')\n","print(sentences_train[10])"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["ki shob korteso amr matha gorom hocce ? ? ? ? ? ? ? ? ? ? ? ? ?\n","---\n","ki shob korteso amr matha gorom hocce\n"]}]},{"cell_type":"code","metadata":{"id":"2A_P7eR7W-6E"},"source":["# model = tf.keras.Sequential([\n","#     # Add an Embedding layer expecting input vocab of size 5000, and output embedding dimension of size 64 we set at the top\n","#     tf.keras.layers.Embedding(vocab_size, embedding_dim),\n","#     # tf.keras.layers.Conv1D(32, 5, activation='relu'),\n","#     # tf.keras.layers.MaxPooling1D(),\n","#     tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(embedding_dim)),\n","# #    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(32)),\n","#     # use ReLU in place of tanh function since they are very good alternatives of each other.\n","#     tf.keras.layers.Dense(32, activation='relu'),\n","#     # Add a Dense layer with 6 units and softmax activation.\n","#     # When we have multiple outputs, softmax convert outputs layers into a probability distribution.\n","#     tf.keras.layers.Dense(6, activation='softmax')\n","# ])\n","# model.summary()\n","\n","model = Sequential()\n","model.add(layers.Embedding(vocab_size, embedding_dim))\n","# model.add(layers.Conv1D(32, 5, activation='relu'))\n","# model.add(layers.MaxPooling1D())\n","# model.add(layers.Dropout(0.3))\n","model.add(layers.Bidirectional(layers.LSTM(embedding_dim)))\n","model.add(layers.Dense(32, activation='relu'))\n","model.add(layers.Dense(6, activation='softmax'))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"54SAHxdJUXHm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655898697373,"user_tz":-360,"elapsed":428,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"eed7f2d9-36b3-4d48-b3eb-400192ede6de"},"source":["opt = tensorflow.keras.optimizers.RMSprop(learning_rate=0.003)\n","model.compile(loss='logcosh', \n","              optimizer=opt, \n","              metrics=['accuracy'])\n","model.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_2\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding_3 (Embedding)     (None, None, 35)          700000    \n","                                                                 \n"," bidirectional_2 (Bidirectio  (None, 70)               19880     \n"," nal)                                                            \n","                                                                 \n"," dense_9 (Dense)             (None, 32)                2272      \n","                                                                 \n"," dense_10 (Dense)            (None, 6)                 198       \n","                                                                 \n","=================================================================\n","Total params: 722,350\n","Trainable params: 722,350\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"code","metadata":{"id":"vzfVLSGAZNES","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655898730796,"user_tz":-360,"elapsed":30095,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"dae1452d-093f-48d8-b808-1d1075b7e0b2"},"source":["num_epochs = 20\n","batch_size = 30\n","history = model.fit(train_padded, y_train, \n","                    epochs=num_epochs, \n","                    validation_data=(validation_padded, y_test),\n","                    # batch_size=batch_size,\n","                    verbose=True)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","127/127 [==============================] - 6s 16ms/step - loss: 0.0562 - accuracy: 0.3886 - val_loss: 0.0467 - val_accuracy: 0.5256\n","Epoch 2/20\n","127/127 [==============================] - 1s 9ms/step - loss: 0.0377 - accuracy: 0.6405 - val_loss: 0.0441 - val_accuracy: 0.5592\n","Epoch 3/20\n","127/127 [==============================] - 1s 9ms/step - loss: 0.0247 - accuracy: 0.7715 - val_loss: 0.0434 - val_accuracy: 0.5858\n","Epoch 4/20\n","127/127 [==============================] - 2s 16ms/step - loss: 0.0163 - accuracy: 0.8549 - val_loss: 0.0475 - val_accuracy: 0.5690\n","Epoch 5/20\n","127/127 [==============================] - 2s 16ms/step - loss: 0.0114 - accuracy: 0.9023 - val_loss: 0.0468 - val_accuracy: 0.5641\n","Epoch 6/20\n","127/127 [==============================] - 1s 9ms/step - loss: 0.0080 - accuracy: 0.9312 - val_loss: 0.0522 - val_accuracy: 0.5483\n","Epoch 7/20\n","127/127 [==============================] - 1s 9ms/step - loss: 0.0064 - accuracy: 0.9447 - val_loss: 0.0499 - val_accuracy: 0.5641\n","Epoch 8/20\n","127/127 [==============================] - 1s 9ms/step - loss: 0.0051 - accuracy: 0.9548 - val_loss: 0.0532 - val_accuracy: 0.5237\n","Epoch 9/20\n","127/127 [==============================] - 1s 9ms/step - loss: 0.0043 - accuracy: 0.9637 - val_loss: 0.0518 - val_accuracy: 0.5464\n","Epoch 10/20\n","127/127 [==============================] - 1s 9ms/step - loss: 0.0037 - accuracy: 0.9687 - val_loss: 0.0552 - val_accuracy: 0.5108\n","Epoch 11/20\n","127/127 [==============================] - 1s 10ms/step - loss: 0.0031 - accuracy: 0.9736 - val_loss: 0.0525 - val_accuracy: 0.5572\n","Epoch 12/20\n","127/127 [==============================] - 1s 9ms/step - loss: 0.0026 - accuracy: 0.9771 - val_loss: 0.0534 - val_accuracy: 0.5523\n","Epoch 13/20\n","127/127 [==============================] - 1s 10ms/step - loss: 0.0025 - accuracy: 0.9795 - val_loss: 0.0519 - val_accuracy: 0.5631\n","Epoch 14/20\n","127/127 [==============================] - 1s 9ms/step - loss: 0.0021 - accuracy: 0.9812 - val_loss: 0.0548 - val_accuracy: 0.5345\n","Epoch 15/20\n","127/127 [==============================] - 1s 9ms/step - loss: 0.0019 - accuracy: 0.9840 - val_loss: 0.0514 - val_accuracy: 0.5582\n","Epoch 16/20\n","127/127 [==============================] - 1s 10ms/step - loss: 0.0019 - accuracy: 0.9827 - val_loss: 0.0525 - val_accuracy: 0.5552\n","Epoch 17/20\n","127/127 [==============================] - 1s 10ms/step - loss: 0.0015 - accuracy: 0.9867 - val_loss: 0.0540 - val_accuracy: 0.5365\n","Epoch 18/20\n","127/127 [==============================] - 1s 10ms/step - loss: 0.0014 - accuracy: 0.9884 - val_loss: 0.0542 - val_accuracy: 0.5434\n","Epoch 19/20\n","127/127 [==============================] - 1s 10ms/step - loss: 0.0013 - accuracy: 0.9877 - val_loss: 0.0530 - val_accuracy: 0.5720\n","Epoch 20/20\n","127/127 [==============================] - 1s 10ms/step - loss: 0.0012 - accuracy: 0.9882 - val_loss: 0.0524 - val_accuracy: 0.5483\n"]}]},{"cell_type":"markdown","metadata":{"id":"6gHvFIqf1Yq8"},"source":["### 6.4 Evaluation metrics with plotting"]},{"cell_type":"code","metadata":{"id":"o8xvB5XAuVP0","colab":{"base_uri":"https://localhost:8080/","height":337},"executionInfo":{"status":"ok","timestamp":1655898734880,"user_tz":-360,"elapsed":676,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"1682aa99-86d4-448a-d915-27d6bca4134c"},"source":["plot_history(history.history)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 864x360 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"NyxNaQefCGDZ"},"source":["# Attention"]},{"cell_type":"code","metadata":{"id":"7AbstrPICDvw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655898745706,"user_tz":-360,"elapsed":1156,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"ade8ca60-a572-4821-ec36-1d4e6107dbec"},"source":["class Attention(tf.keras.Model):\n","    def __init__(self, units):\n","        super(Attention, self).__init__()\n","        self.W1 = tf.keras.layers.Dense(units)\n","        self.W2 = tf.keras.layers.Dense(units)\n","        self.V = tf.keras.layers.Dense(1)\n","\n","    def call(self, features, hidden):\n","        hidden_with_time_axis = tf.expand_dims(hidden, 1)\n","        score = tf.nn.tanh(self.W1(features) + self.W2(hidden_with_time_axis))\n","        attention_weights = tf.nn.softmax(self.V(score), axis=1)\n","        context_vector = attention_weights * features\n","        context_vector = tf.reduce_sum(context_vector, axis=1)\n","\n","        return context_vector, attention_weights\n","\n","import tensorflow as tf\n","from keras_preprocessing import sequence\n","# from tensorflow import keras\n","# from tensorflow.keras import Input\n","# from tensorflow.keras.layers import Concatenate\n","\n","sequence_input = tf.keras.Input(shape=(max_length,), dtype='int32')\n","embedded_sequences = tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length)(sequence_input)\n","tdist = tf.keras.layers.TimeDistributed(tf.keras.layers.Dense(100,activation='relu'))(embedded_sequences)\n","lstm = tf.keras.layers.Bidirectional(tf.keras.layers.LSTM\n","                                     (embedding_dim,\n","                                      dropout=0.2,\n","                                      return_sequences=True,\n","                                      return_state=True,\n","                                      recurrent_activation='relu',\n","                                      recurrent_initializer='glorot_uniform'), name=\"bi_lstm_0\")(tdist)\n","\n","lstm, forward_h, forward_c, backward_h, backward_c = tf.keras.layers.Bidirectional \\\n","    (tf.keras.layers.LSTM\n","     (embedding_dim,\n","      dropout=0.2,\n","      return_sequences=True,\n","      return_state=True,\n","      recurrent_activation='relu',\n","      recurrent_initializer='glorot_uniform'))(lstm)\n","\n","state_h = tf.keras.layers.Concatenate()([forward_h, backward_h])\n","state_c = tf.keras.layers.Concatenate()([forward_c, backward_c])\n","attention = Attention(35)\n","context_vector, attention_weights = attention(lstm, state_h)\n","fmod = tf.keras.layers.Flatten()(context_vector)\n","output = tf.keras.layers.Dense(6, activation='softmax')(fmod)\n","\n","model = tf.keras.Model(inputs=sequence_input, outputs=output)\n","model.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["WARNING:tensorflow:Layer lstm_4 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n","WARNING:tensorflow:Layer lstm_4 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n","WARNING:tensorflow:Layer lstm_4 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n","WARNING:tensorflow:Layer lstm_5 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n","WARNING:tensorflow:Layer lstm_5 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n","WARNING:tensorflow:Layer lstm_5 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n","Model: \"model_1\"\n","__________________________________________________________________________________________________\n"," Layer (type)                   Output Shape         Param #     Connected to                     \n","==================================================================================================\n"," input_2 (InputLayer)           [(None, 20)]         0           []                               \n","                                                                                                  \n"," embedding_4 (Embedding)        (None, 20, 35)       700000      ['input_2[0][0]']                \n","                                                                                                  \n"," time_distributed_1 (TimeDistri  (None, 20, 100)     3600        ['embedding_4[0][0]']            \n"," buted)                                                                                           \n","                                                                                                  \n"," bi_lstm_0 (Bidirectional)      [(None, 20, 70),     38080       ['time_distributed_1[0][0]']     \n","                                 (None, 35),                                                      \n","                                 (None, 35),                                                      \n","                                 (None, 35),                                                      \n","                                 (None, 35)]                                                      \n","                                                                                                  \n"," bidirectional_3 (Bidirectional  [(None, 20, 70),    29680       ['bi_lstm_0[0][0]',              \n"," )                               (None, 35),                      'bi_lstm_0[0][1]',              \n","                                 (None, 35),                      'bi_lstm_0[0][2]',              \n","                                 (None, 35),                      'bi_lstm_0[0][3]',              \n","                                 (None, 35)]                      'bi_lstm_0[0][4]']              \n","                                                                                                  \n"," concatenate_2 (Concatenate)    (None, 70)           0           ['bidirectional_3[0][1]',        \n","                                                                  'bidirectional_3[0][3]']        \n","                                                                                                  \n"," attention_1 (Attention)        ((None, 70),         5006        ['bidirectional_3[0][0]',        \n","                                 (None, 20, 1))                   'concatenate_2[0][0]']          \n","                                                                                                  \n"," flatten_2 (Flatten)            (None, 70)           0           ['attention_1[0][0]']            \n","                                                                                                  \n"," dense_15 (Dense)               (None, 6)            426         ['flatten_2[0][0]']              \n","                                                                                                  \n","==================================================================================================\n","Total params: 776,792\n","Trainable params: 776,792\n","Non-trainable params: 0\n","__________________________________________________________________________________________________\n"]}]},{"cell_type":"code","metadata":{"id":"wTQdpqiSCaor"},"source":["early_stopping_callback = tf.keras.callbacks.EarlyStopping(monitor='val_loss',\n","                                                        min_delta=0,\n","                                                        patience=1,\n","                                                        verbose=0, mode='auto')\n","\n","opt = tf.keras.optimizers.Adam(learning_rate=0.001)\n","\n","name = \"24946_72.47\"\n","# model.load_weights(\"/content/drive/My Drive/nlp/emotion/weights/24946_72.47/\"+name+\".weights\")\n","model.compile(loss='logcosh', \n","              optimizer=opt, \n","              metrics=['accuracy'])                                            "],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_train.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vfTCQr_CNjvr","executionInfo":{"status":"ok","timestamp":1655898756190,"user_tz":-360,"elapsed":369,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"90aad9cb-2503-44cd-f359-495864d70027"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(4053, 6)"]},"metadata":{},"execution_count":96}]},{"cell_type":"code","metadata":{"id":"ckGlFZg3MnvO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655899084876,"user_tz":-360,"elapsed":325651,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"365a7e55-b37b-44f4-c346-6e109e8d0d03"},"source":["num_epochs = 15\n","batch_size = 30\n","history = model.fit(train_padded, y_train, \n","                    epochs=num_epochs, \n","                    validation_data=(validation_padded, y_test),\n","                    # batch_size=batch_size,\n","                    verbose=True,\n","                    # callbacks=[early_stopping_callback]\n","                    )"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/15\n","127/127 [==============================] - 28s 174ms/step - loss: 0.0622 - accuracy: 0.3309 - val_loss: 0.0600 - val_accuracy: 0.3481\n","Epoch 2/15\n","127/127 [==============================] - 21s 166ms/step - loss: 0.0564 - accuracy: 0.3617 - val_loss: 0.0523 - val_accuracy: 0.4181\n","Epoch 3/15\n","127/127 [==============================] - 21s 169ms/step - loss: 0.0450 - accuracy: 0.5038 - val_loss: 0.0523 - val_accuracy: 0.4320\n","Epoch 4/15\n","127/127 [==============================] - 21s 165ms/step - loss: 0.0387 - accuracy: 0.6028 - val_loss: 0.0528 - val_accuracy: 0.4566\n","Epoch 5/15\n","127/127 [==============================] - 21s 168ms/step - loss: 0.0304 - accuracy: 0.7027 - val_loss: 0.0520 - val_accuracy: 0.5020\n","Epoch 6/15\n","127/127 [==============================] - 21s 167ms/step - loss: 0.0237 - accuracy: 0.7787 - val_loss: 0.0527 - val_accuracy: 0.5108\n","Epoch 7/15\n","127/127 [==============================] - 21s 168ms/step - loss: 0.0185 - accuracy: 0.8275 - val_loss: 0.0554 - val_accuracy: 0.4734\n","Epoch 8/15\n","127/127 [==============================] - 21s 165ms/step - loss: 0.0140 - accuracy: 0.8724 - val_loss: 0.0559 - val_accuracy: 0.5158\n","Epoch 9/15\n","127/127 [==============================] - 21s 168ms/step - loss: 0.0118 - accuracy: 0.9025 - val_loss: 0.0561 - val_accuracy: 0.4892\n","Epoch 10/15\n","127/127 [==============================] - 23s 179ms/step - loss: 0.0103 - accuracy: 0.9112 - val_loss: 0.0589 - val_accuracy: 0.4753\n","Epoch 11/15\n","127/127 [==============================] - 21s 166ms/step - loss: 0.0087 - accuracy: 0.9257 - val_loss: 0.0595 - val_accuracy: 0.4961\n","Epoch 12/15\n","127/127 [==============================] - 21s 166ms/step - loss: 0.0097 - accuracy: 0.9164 - val_loss: 0.0578 - val_accuracy: 0.5020\n","Epoch 13/15\n","127/127 [==============================] - 21s 166ms/step - loss: 0.0088 - accuracy: 0.9265 - val_loss: 0.0599 - val_accuracy: 0.4734\n","Epoch 14/15\n","127/127 [==============================] - 21s 166ms/step - loss: 0.0065 - accuracy: 0.9472 - val_loss: 0.0621 - val_accuracy: 0.4684\n","Epoch 15/15\n","127/127 [==============================] - 21s 165ms/step - loss: 0.0059 - accuracy: 0.9519 - val_loss: 0.0613 - val_accuracy: 0.4822\n"]}]},{"cell_type":"code","metadata":{"id":"baGsy5iXRcdo","colab":{"base_uri":"https://localhost:8080/","height":337},"executionInfo":{"status":"ok","timestamp":1655899099753,"user_tz":-360,"elapsed":716,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"fd3a2e36-6912-47cf-e3d6-5456d2c8a7e1"},"source":["plot_history(history.history)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 864x360 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"QCppozPYW2jV"},"source":["# Hierarchicl Attention"]},{"cell_type":"code","metadata":{"id":"bm83ZboAW0ur"},"source":["import os\n","import re\n","\n","import numpy as np\n","import pandas as pd\n","from bs4 import BeautifulSoup\n","from keras import backend as K\n","from keras.models import Model\n","from keras import initializers\n","from keras.layers import Layer\n","from keras.layers import Dense, Input\n","from keras.layers import Embedding, GRU, Bidirectional, TimeDistributed\n","from keras.preprocessing.text import Tokenizer, text_to_word_sequence\n","from keras.utils.np_utils import to_categorical\n","from nltk import tokenize\n","\n","class HierarchicalAttentionNetwork(Layer):\n","    def __init__(self, attention_dim):\n","        self.init = initializers.get('normal')\n","        self.supports_masking = True\n","        self.attention_dim = attention_dim\n","        super(HierarchicalAttentionNetwork, self).__init__()\n","\n","    def build(self, input_shape):\n","        assert len(input_shape) == 3\n","        self.W = K.variable(self.init((input_shape[-1], self.attention_dim)))\n","        self.b = K.variable(self.init((self.attention_dim,)))\n","        self.u = K.variable(self.init((self.attention_dim, 1)))\n","        self._trainable_weights = [self.W, self.b, self.u]\n","        super(HierarchicalAttentionNetwork, self).build(input_shape)\n","\n","    def compute_mask(self, inputs, mask=None):\n","        return mask\n","\n","    def call(self, x, mask=None):\n","        # size of x :[batch_size, sel_len, attention_dim]\n","        # size of u :[batch_size, attention_dim]\n","        # uit = tanh(xW+b)\n","        uit = K.tanh(K.bias_add(K.dot(x, self.W), self.b))\n","\n","        ait = K.exp(K.squeeze(K.dot(uit, self.u), -1))\n","\n","        if mask is not None:\n","            # Cast the mask to floatX to avoid float64 upcasting\n","            ait *= K.cast(mask, K.floatx())\n","        ait /= K.cast(K.sum(ait, axis=1, keepdims=True) + K.epsilon(), K.floatx())\n","        weighted_input = x * K.expand_dims(ait)\n","        output = K.sum(weighted_input, axis=1)\n","\n","        return output\n","\n","    def compute_output_shape(self, input_shape):\n","        return input_shape[0], input_shape[-1]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"S_GwqwoFi5__","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655900515780,"user_tz":-360,"elapsed":3006,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"396eee64-1311-497c-d76c-b9d67901be1e"},"source":["max_sentences = 12\n","embedding_layer = Embedding(vocab_size, embedding_dim,\n","                            input_length=max_length)\n","\n","sentence_input = Input(shape=(max_length,), dtype='int32')\n","embedded_sequences = embedding_layer(sentence_input)\n","lstm_word = Bidirectional(GRU(50, return_sequences=True))(embedded_sequences)\n","attn_word = HierarchicalAttentionNetwork(100)(lstm_word)\n","sentenceEncoder = Model(sentence_input, attn_word)\n","\n","review_input = Input(shape=(max_sentences, max_length), dtype='int32')\n","review_encoder = TimeDistributed(sentenceEncoder)(review_input)\n","lstm_sentence = Bidirectional(GRU(50, return_sequences=True))(review_encoder)\n","attn_sentence = HierarchicalAttentionNetwork(100)(lstm_sentence)\n","preds = Dense(6, activation='softmax')(attn_sentence)\n","model = Model(review_input, preds)\n","model.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"model_16\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," input_22 (InputLayer)       [(None, 12, 20)]          0         \n","                                                                 \n"," time_distributed_9 (TimeDis  (None, 12, 100)          736300    \n"," tributed)                                                       \n","                                                                 \n"," bidirectional_22 (Bidirecti  (None, 12, 100)          45600     \n"," onal)                                                           \n","                                                                 \n"," hierarchical_attention_netw  (None, 100)              10200     \n"," ork_16 (HierarchicalAttenti                                     \n"," onNetwork)                                                      \n","                                                                 \n"," dense_22 (Dense)            (None, 6)                 606       \n","                                                                 \n","=================================================================\n","Total params: 792,706\n","Trainable params: 792,706\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["early_stopping_callback = tf.keras.callbacks.EarlyStopping(monitor='val_loss',\n","                                                        min_delta=0,\n","                                                        patience=1,\n","                                                        verbose=0, mode='auto')\n","\n","opt = tf.keras.optimizers.Adam(learning_rate=0.001)\n","\n","name = \"24946_72.47\"\n","# model.load_weights(\"/content/drive/My Drive/nlp/emotion/weights/24946_72.47/\"+name+\".weights\")\n","model.compile(loss='logcosh', \n","              optimizer=opt, \n","              metrics=['accuracy'])                                            "],"metadata":{"id":"JJ_AfgS9Wsja"},"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lCu2su4Vjs4J","colab":{"base_uri":"https://localhost:8080/","height":675},"executionInfo":{"status":"error","timestamp":1655902163204,"user_tz":-360,"elapsed":478,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"3278d0de-3f4f-49e0-93b4-46b3fe56d615"},"source":["opt = tf.keras.optimizers.Adam(learning_rate=0.001)\n","model.compile(loss='categorical_crossentropy', \n","              optimizer=opt, \n","              metrics=['accuracy'])    \n","num_epochs = 15\n","batch_size = 30\n","print(\"model fitting - Hierachical attention network\")\n","history = model.fit(train_padded, y_train, \n","                    epochs=num_epochs, \n","                    validation_data=(validation_padded, y_test),\n","                    # batch_size=batch_size,\n","                    verbose=True,\n","                    # callbacks=[early_stopping_callback]\n","                    )"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["model fitting - Hierachical attention network\n","Epoch 1/15\n"]},{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-136-e431a740391c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m                     \u001b[0mvalidation_data\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalidation_padded\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m                     \u001b[0;31m# batch_size=batch_size,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m                     \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m                     \u001b[0;31m# callbacks=[early_stopping_callback]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m                     )\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 67\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     68\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m       \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/framework/func_graph.py\u001b[0m in \u001b[0;36mautograph_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m   1145\u001b[0m           \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint:disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1146\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"ag_error_metadata\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1147\u001b[0;31m               \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mag_error_metadata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_exception\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1148\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1149\u001b[0m               \u001b[0;32mraise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: in user code:\n\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 1021, in train_function  *\n        return step_function(self, iterator)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 1010, in step_function  **\n        outputs = model.distribute_strategy.run(run_step, args=(data,))\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 1000, in run_step  **\n        outputs = model.train_step(data)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 859, in train_step\n        y_pred = self(x, training=True)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\", line 67, in error_handler\n        raise e.with_traceback(filtered_tb) from None\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/input_spec.py\", line 264, in assert_input_compatibility\n        raise ValueError(f'Input {input_index} of layer \"{layer_name}\" is '\n\n    ValueError: Input 0 of layer \"model_16\" is incompatible with the layer: expected shape=(None, 12, 20), found shape=(None, 20)\n"]}]},{"cell_type":"code","metadata":{"id":"Nxh5J7Dul6k9","colab":{"base_uri":"https://localhost:8080/","height":165},"executionInfo":{"status":"error","timestamp":1655902174181,"user_tz":-360,"elapsed":428,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"4bd21f32-a2e6-4a91-fe65-f1b4be1d3764"},"source":["train_padded.reshape()"],"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-137-4537ce5f2832>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtrain_padded\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: reshape() takes exactly 1 argument (0 given)"]}]},{"cell_type":"code","metadata":{"id":"rq3gCkQ2l6eh","colab":{"base_uri":"https://localhost:8080/","height":134},"executionInfo":{"status":"ok","timestamp":1596479556826,"user_tz":-360,"elapsed":1139,"user":{"displayName":"AVISHEK DAS 1504018","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhU-j0wNDmKHB4Gpe2iUu9qEuJeC47SwpemJ5m05g=s64","userId":"01928616202271817774"}},"outputId":"cddebca2-fce7-4523-cae3-4be77084be6c"},"source":["train_padded"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[   2,   38,  324, ...,    0,    0,    0],\n","       [   2,  195,    3, ...,  302,   19,    0],\n","       [ 608,    5,  977, ...,  147, 3667, 1432],\n","       ...,\n","       [   2,  573,    4, ...,    0,    0,    0],\n","       [ 258,    7,  245, ...,    0,    0,    0],\n","       [  39,   48,  189, ...,  661,  189,    0]], dtype=int32)"]},"metadata":{"tags":[]},"execution_count":137}]},{"cell_type":"code","metadata":{"id":"avRjPsB3l6Xn","colab":{"base_uri":"https://localhost:8080/","height":337},"executionInfo":{"status":"error","timestamp":1596479586826,"user_tz":-360,"elapsed":1191,"user":{"displayName":"AVISHEK DAS 1504018","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhU-j0wNDmKHB4Gpe2iUu9qEuJeC47SwpemJ5m05g=s64","userId":"01928616202271817774"}},"outputId":"3b401ddc-ed07-4f52-dddb-ecaafa0ca24d"},"source":["np.reshape(train_padded, (train_padded.shape[0], 9, train_padded.shape[1]))"],"execution_count":null,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-140-d8ec476695a3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_padded\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mtrain_padded\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m9\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_padded\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<__array_function__ internals>\u001b[0m in \u001b[0;36mreshape\u001b[0;34m(*args, **kwargs)\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/numpy/core/fromnumeric.py\u001b[0m in \u001b[0;36mreshape\u001b[0;34m(a, newshape, order)\u001b[0m\n\u001b[1;32m    299\u001b[0m            [5, 6]])\n\u001b[1;32m    300\u001b[0m     \"\"\"\n\u001b[0;32m--> 301\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_wrapfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'reshape'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnewshape\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    302\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    303\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/numpy/core/fromnumeric.py\u001b[0m in \u001b[0;36m_wrapfunc\u001b[0;34m(obj, method, *args, **kwds)\u001b[0m\n\u001b[1;32m     59\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     60\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 61\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mbound\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     62\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m         \u001b[0;31m# A TypeError occurs if the object does have such a method in its\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: cannot reshape array of size 424020 into shape (21201,9,20)"]}]},{"cell_type":"code","metadata":{"id":"uSimo-JZW8sd","colab":{"base_uri":"https://localhost:8080/","height":387},"executionInfo":{"status":"error","timestamp":1596478880912,"user_tz":-360,"elapsed":1135,"user":{"displayName":"AVISHEK DAS 1504018","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhU-j0wNDmKHB4Gpe2iUu9qEuJeC47SwpemJ5m05g=s64","userId":"01928616202271817774"}},"outputId":"eaa3f9d0-1556-4d6c-ed82-ac37dd5feb3b"},"source":["num_epochs = 15\n","batch_size = 30\n","history = model.fit(train_padded, y_train, \n","                    epochs=num_epochs, \n","                    validation_data=(validation_padded, y_test),\n","                    # batch_size=batch_size,\n","                    verbose=True,\n","                    # callbacks=[early_stopping_callback]\n","                    )"],"execution_count":null,"outputs":[{"output_type":"error","ename":"RuntimeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","\u001b[0;32m<ipython-input-130-0590b9eb07f0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m                     \u001b[0mvalidation_data\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalidation_padded\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m                     \u001b[0;31m# batch_size=batch_size,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m                     \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m                     \u001b[0;31m# callbacks=[early_stopping_callback]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m                     )\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_freq, max_queue_size, workers, use_multiprocessing, **kwargs)\u001b[0m\n\u001b[1;32m   1152\u001b[0m             \u001b[0msample_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msample_weight\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1153\u001b[0m             \u001b[0mclass_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mclass_weight\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1154\u001b[0;31m             batch_size=batch_size)\n\u001b[0m\u001b[1;32m   1155\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1156\u001b[0m         \u001b[0;31m# Prepare validation data.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36m_standardize_user_data\u001b[0;34m(self, x, y, sample_weight, class_weight, check_array_lengths, batch_size)\u001b[0m\n\u001b[1;32m    506\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0my\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    507\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptimizer\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 508\u001b[0;31m                 raise RuntimeError('You must compile a model before '\n\u001b[0m\u001b[1;32m    509\u001b[0m                                    \u001b[0;34m'training/testing. '\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    510\u001b[0m                                    'Use `model.compile(optimizer, loss)`.')\n","\u001b[0;31mRuntimeError\u001b[0m: You must compile a model before training/testing. Use `model.compile(optimizer, loss)`."]}]},{"cell_type":"code","metadata":{"id":"jzomb_J4nT1r"},"source":["from tensorflow.keras import backend as K\n","from tensorflow.keras.layers import Layer\n","\n","class AttentionLayer(Layer):\n","    \"\"\"\n","    Hierarchial Attention Layer as described by Hierarchical Attention Networks for Document Classification(2016)\n","    - Yang et. al.\n","    Source: https://www.cs.cmu.edu/~hovy/papers/16HLT-hierarchical-attention-networks.pdf\n","    Theano backend\n","    \"\"\"\n","    def __init__(self,attention_dim=100,return_coefficients=False,**kwargs):\n","        # Initializer \n","        self.supports_masking = True\n","        self.return_coefficients = return_coefficients\n","        self.init = tf.keras.initializers.get('glorot_uniform') # initializes values with uniform distribution\n","        self.attention_dim = attention_dim\n","        super(AttentionLayer, self).__init__(**kwargs)\n","\n","    def build(self, input_shape):\n","        # Builds all weights\n","        # W = Weight matrix, b = bias vector, u = context vector\n","        assert len(input_shape) == 3\n","        self.W = K.variable(self.init((input_shape[-1], self.attention_dim)),name='W')\n","        self.b = K.variable(self.init((self.attention_dim, )),name='b')\n","        self.u = K.variable(self.init((self.attention_dim, 1)),name='u')\n","        self._trainable_weights = [self.W, self.b, self.u]\n","\n","        super(AttentionLayer, self).build(input_shape)\n","\n","    def compute_mask(self, input, input_mask=None):\n","        return None\n","\n","    def call(self, hit, mask=None):\n","        # Here, the actual calculation is done\n","        uit = K.bias_add(K.dot(hit, self.W),self.b)\n","        uit = K.tanh(uit)\n","        \n","        ait = K.dot(uit, self.u)\n","        ait = K.squeeze(ait, -1)\n","        ait = K.exp(ait)\n","        \n","        if mask is not None:\n","            ait *= K.cast(mask, K.floatx())\n","\n","        ait /= K.cast(K.sum(ait, axis=1, keepdims=True) + K.epsilon(), K.floatx())\n","        ait = K.expand_dims(ait)\n","        weighted_input = hit * ait\n","        \n","        if self.return_coefficients:\n","            return [K.sum(weighted_input, axis=1), ait]\n","        else:\n","            return K.sum(weighted_input, axis=1)\n","\n","    def compute_output_shape(self, input_shape):\n","        if self.return_coefficients:\n","            return [(input_shape[0], input_shape[-1]), (input_shape[0], input_shape[-1], 1)]\n","        else:\n","            return input_shape[0], input_shape[-1]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"OwFfljp8W8Fg","colab":{"base_uri":"https://localhost:8080/","height":356},"executionInfo":{"status":"error","timestamp":1655900167741,"user_tz":-360,"elapsed":1078,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"f3670504-dca2-41fa-d527-b7ca528b7ba7"},"source":["MAX_SENTENCE_NUM = 9\n","embedding_layer = tf.keras.layers.Embedding(vocab_size,embedding_dim ,\n","                            input_length=max_length,name='word_embedding')\n","\n","# Words level attention model\n","word_input = tf.keras.layers.Input(shape=(max_length,), dtype='int32',name='word_input')\n","word_sequences = embedding_layer(word_input)\n","word_gru = tf.keras.layers.Bidirectional(tf.keras.layers.GRU(50, return_sequences=True),name='word_gru')(word_sequences)\n","word_dense = tf.keras.layers.Dense(100, activation='relu', name='word_dense')(word_gru) \n","word_att,word_coeffs = AttentionLayer(embedding_dim)(word_dense)\n","wordEncoder = tf.keras.Model(inputs = word_input,outputs = word_att)\n","\n","# Sentence level attention model\n","sent_input = tf.keras.layers.Input(shape=(MAX_SENTENCE_NUM,max_length), dtype='int32',name='sent_input')\n","sent_encoder = tf.keras.layers.TimeDistributed(wordEncoder,name='sent_linking')(sent_input)\n","sent_gru = tf.keras.layers.Bidirectional(tf.keras.layers.GRU(50, return_sequences=True),name='sent_gru')(sent_encoder)\n","sent_dense = tf.keras.layers.Dense(100, activation='relu', name='sent_dense')(sent_gru) \n","sent_att,sent_coeffs = AttentionLayer(embedding_dim)(sent_dense)\n","sent_drop = tf.keras.layers.Dropout(0.5,name='sent_dropout')(sent_att)\n","preds = tf.keras.layers.Dense(5, activation='softmax',name='output')(sent_drop)\n","\n","# Model compile\n","model = tf.keras.Model(sent_input, preds)\n","model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['acc'])\n","print(wordEncoder.summary())\n","print(model.summary())"],"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-121-72ada1fa8e64>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0mword_gru\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mBidirectional\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mGRU\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m50\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreturn_sequences\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'word_gru'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mword_sequences\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0mword_dense\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDense\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mactivation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'relu'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'word_dense'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mword_gru\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m \u001b[0mword_att\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mword_coeffs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mAttentionLayer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0membedding_dim\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mword_dense\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m \u001b[0mwordEncoder\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mModel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mword_input\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mword_att\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/engine/keras_tensor.py\u001b[0m in \u001b[0;36m__iter__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    367\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    368\u001b[0m       raise TypeError(\n\u001b[0;32m--> 369\u001b[0;31m           'Cannot iterate over a Tensor with unknown first dimension.')\n\u001b[0m\u001b[1;32m    370\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0m_KerasTensorIterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    371\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: Cannot iterate over a Tensor with unknown first dimension."]}]},{"cell_type":"code","metadata":{"id":"jNt5GQ_Q9n8y"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"s6vL6dAX9n4C"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"29KKV4Ua9nzd"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"bFK2RWa19nt0"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"OSQ3gMLa9nol"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k5IyXkZ0W7-u"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"qze349zVW73h"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"el8GNBofithw","colab":{"base_uri":"https://localhost:8080/","height":50},"executionInfo":{"status":"ok","timestamp":1596357609922,"user_tz":-360,"elapsed":4071,"user":{"displayName":"AVISHEK DAS 1504018","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhU-j0wNDmKHB4Gpe2iUu9qEuJeC47SwpemJ5m05g=s64","userId":"01928616202271817774"}},"outputId":"0a6505ff-5f04-47a5-8883-7afc3c51e3c5"},"source":["name = \"28503_71.44\"\n","!mkdir \"/content/drive/My Drive/nlp/emotion/weights/28503_70.44/\"\n","# serialize weights to HDF5\n","model.save_weights(\"/content/drive/My Drive/nlp/emotion/weights/\"+name+\"/\"+name+\".weights\")\n","print(\"Saved model to disk\")\n","\n","import pickle\n","with open(\"/content/drive/My Drive/nlp/emotion/weights/\"+name+\"/\"+name+\".hist\", 'wb') as file_pi:\n","   pickle.dump(history.history, file_pi)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["mkdir: cannot create directory ‘/content/drive/My Drive/nlp/emotion/weights/28503_70.44/’: File exists\n","Saved model to disk\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"jWmEZaPoqtL1","colab":{"base_uri":"https://localhost:8080/","height":337},"executionInfo":{"status":"ok","timestamp":1596346935413,"user_tz":-360,"elapsed":1229,"user":{"displayName":"AVISHEK DAS 1504018","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhU-j0wNDmKHB4Gpe2iUu9qEuJeC47SwpemJ5m05g=s64","userId":"01928616202271817774"}},"outputId":"222083d0-e3fe-445d-96e8-5009b22632cd"},"source":["with open(\"/content/drive/My Drive/nlp/emotion/weights/\"+name+\".hist\", 'rb') as p:\n","  hist = pickle.load(p)\n","plot_history(hist)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 864x360 with 2 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"mqf5fnPDlQCl"},"source":["model.save_weights('modjbjkjkel')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"uMNsMZ2ppxWe","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1596346301269,"user_tz":-360,"elapsed":1309,"user":{"displayName":"AVISHEK DAS 1504018","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhU-j0wNDmKHB4Gpe2iUu9qEuJeC47SwpemJ5m05g=s64","userId":"01928616202271817774"}},"outputId":"916643f6-7f27-4635-a281-876ba31fdc76"},"source":[""],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.training.tracking.util.CheckpointLoadStatus at 0x7fc146eeeba8>"]},"metadata":{"tags":[]},"execution_count":138}]},{"cell_type":"markdown","metadata":{"id":"AiuNT4noJnYB"},"source":["# CNN"]},{"cell_type":"code","metadata":{"id":"YpeE1q82bAE1"},"source":["RANDOM_STATE = 42\n","# Split train & test\n","sentences = df['Text'].values\n","target = df['Label'].values\n","text_train, text_test, y_train, y_test = train_test_split(sentences, target,  test_size=0.15, random_state=RANDOM_STATE)\n","\n","from tensorflow.keras.utils import to_categorical\n","y_train = to_categorical(y_train)\n","y_test = to_categorical(y_test)\n","\n","# Tokenize and transform to integer index\n","tokenizer = Tokenizer()\n","tokenizer.fit_on_texts(text_train)\n","\n","X_train = tokenizer.texts_to_sequences(text_train)\n","X_test = tokenizer.texts_to_sequences(text_test)\n","\n","vocab_size = len(tokenizer.word_index) + 1  # Adding 1 because of reserved 0 index\n","maxlen = max(len(x) for x in X_train) # longest text in train set\n","\n","# Add pading to ensure all vectors have same dimensionality\n","X_train = pad_sequences(X_train, padding='post', maxlen=maxlen)\n","X_test = pad_sequences(X_test, padding='post', maxlen=maxlen)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0trGYNdD3bIk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655896721490,"user_tz":-360,"elapsed":4,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"22b8bb96-9fcb-4c53-dd4b-8dfc753ddf93"},"source":["vocab_size"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["13058"]},"metadata":{},"execution_count":42}]},{"cell_type":"code","metadata":{"id":"uhf7BDLmiwiR"},"source":["embedding_dim = 30\n","\n","model = Sequential()\n","model.add(layers.Embedding(vocab_size, embedding_dim, input_length=maxlen))\n","# model.add(layers.Embedding(vocab_size, embedding_dim, \n","#                            weights=[embedding_matrix], \n","#                            input_length=maxlen, \n","#                            trainable=False))\n","model.add(layers.Conv1D(32, 5, activation='relu'))\n","model.add(layers.MaxPooling1D())\n","model.add(layers.Conv1D(32, 5, activation='relu'))\n","model.add(layers.Conv1D(128, 5, activation='relu'))\n","model.add(layers.MaxPooling1D())\n","model.add(layers.Flatten())\n","model.add(layers.Dense(32, activation='relu'))\n","# model.add(layers.Dropout(0.4))\n","model.add(layers.Dense(6, activation='softmax'))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"z8jI3nxwJMYe","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655896739745,"user_tz":-360,"elapsed":658,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"54fae4b7-17b3-40f9-f2df-cf498ad4e671"},"source":["opt = tensorflow.keras.optimizers.Adam(learning_rate=0.001)\n","model.compile(loss='logcosh', \n","              optimizer=opt, \n","              metrics=['accuracy'])\n","model.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding_1 (Embedding)     (None, 82, 30)            391740    \n","                                                                 \n"," conv1d (Conv1D)             (None, 78, 32)            4832      \n","                                                                 \n"," max_pooling1d (MaxPooling1D  (None, 39, 32)           0         \n"," )                                                               \n","                                                                 \n"," conv1d_1 (Conv1D)           (None, 35, 32)            5152      \n","                                                                 \n"," conv1d_2 (Conv1D)           (None, 31, 128)           20608     \n","                                                                 \n"," max_pooling1d_1 (MaxPooling  (None, 15, 128)          0         \n"," 1D)                                                             \n","                                                                 \n"," flatten (Flatten)           (None, 1920)              0         \n","                                                                 \n"," dense_2 (Dense)             (None, 32)                61472     \n","                                                                 \n"," dense_3 (Dense)             (None, 6)                 198       \n","                                                                 \n","=================================================================\n","Total params: 484,002\n","Trainable params: 484,002\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"code","metadata":{"id":"xZyF0lq3KuF5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655896833113,"user_tz":-360,"elapsed":41450,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"14a2e270-5155-4b0d-91ff-a097f10da77c"},"source":["# Fit model\n","batch_size = 32\n","history = model.fit(X_train, y_train,\n","                    epochs=30,\n","                    # steps_per_epoch=int(len(X_train)/batch_size),\n","                    verbose=True,\n","                    validation_data=(X_test, y_test),\n","                    # validation_steps=int(len(X_test)/batch_size)\n","                    batch_size=batch_size\n","                    )"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/30\n","135/135 [==============================] - 2s 10ms/step - loss: 0.0035 - accuracy: 0.9735 - val_loss: 0.0663 - val_accuracy: 0.4717\n","Epoch 2/30\n","135/135 [==============================] - 1s 8ms/step - loss: 0.0031 - accuracy: 0.9763 - val_loss: 0.0670 - val_accuracy: 0.4573\n","Epoch 3/30\n","135/135 [==============================] - 1s 8ms/step - loss: 0.0029 - accuracy: 0.9779 - val_loss: 0.0670 - val_accuracy: 0.4639\n","Epoch 4/30\n","135/135 [==============================] - 1s 9ms/step - loss: 0.0029 - accuracy: 0.9784 - val_loss: 0.0670 - val_accuracy: 0.4625\n","Epoch 5/30\n","135/135 [==============================] - 1s 8ms/step - loss: 0.0028 - accuracy: 0.9782 - val_loss: 0.0670 - val_accuracy: 0.4586\n","Epoch 6/30\n","135/135 [==============================] - 1s 7ms/step - loss: 0.0027 - accuracy: 0.9789 - val_loss: 0.0669 - val_accuracy: 0.4573\n","Epoch 7/30\n","135/135 [==============================] - 1s 5ms/step - loss: 0.0027 - accuracy: 0.9789 - val_loss: 0.0675 - val_accuracy: 0.4547\n","Epoch 8/30\n","135/135 [==============================] - 1s 5ms/step - loss: 0.0027 - accuracy: 0.9789 - val_loss: 0.0664 - val_accuracy: 0.4586\n","Epoch 9/30\n","135/135 [==============================] - 1s 5ms/step - loss: 0.0027 - accuracy: 0.9791 - val_loss: 0.0665 - val_accuracy: 0.4573\n","Epoch 10/30\n","135/135 [==============================] - 1s 5ms/step - loss: 0.0026 - accuracy: 0.9793 - val_loss: 0.0669 - val_accuracy: 0.4468\n","Epoch 11/30\n","135/135 [==============================] - 1s 5ms/step - loss: 0.0026 - accuracy: 0.9796 - val_loss: 0.0670 - val_accuracy: 0.4494\n","Epoch 12/30\n","135/135 [==============================] - 1s 5ms/step - loss: 0.0026 - accuracy: 0.9793 - val_loss: 0.0667 - val_accuracy: 0.4507\n","Epoch 13/30\n","135/135 [==============================] - 1s 5ms/step - loss: 0.0025 - accuracy: 0.9805 - val_loss: 0.0674 - val_accuracy: 0.4494\n","Epoch 14/30\n","135/135 [==============================] - 1s 5ms/step - loss: 0.0024 - accuracy: 0.9810 - val_loss: 0.0666 - val_accuracy: 0.4520\n","Epoch 15/30\n","135/135 [==============================] - 1s 5ms/step - loss: 0.0024 - accuracy: 0.9812 - val_loss: 0.0665 - val_accuracy: 0.4455\n","Epoch 16/30\n","135/135 [==============================] - 1s 5ms/step - loss: 0.0023 - accuracy: 0.9817 - val_loss: 0.0682 - val_accuracy: 0.4336\n","Epoch 17/30\n","135/135 [==============================] - 1s 5ms/step - loss: 0.0023 - accuracy: 0.9821 - val_loss: 0.0665 - val_accuracy: 0.4428\n","Epoch 18/30\n","135/135 [==============================] - 1s 5ms/step - loss: 0.0022 - accuracy: 0.9835 - val_loss: 0.0649 - val_accuracy: 0.4691\n","Epoch 19/30\n","135/135 [==============================] - 1s 5ms/step - loss: 0.0022 - accuracy: 0.9833 - val_loss: 0.0652 - val_accuracy: 0.4744\n","Epoch 20/30\n","135/135 [==============================] - 1s 5ms/step - loss: 0.0021 - accuracy: 0.9830 - val_loss: 0.0672 - val_accuracy: 0.4520\n","Epoch 21/30\n","135/135 [==============================] - 1s 5ms/step - loss: 0.0021 - accuracy: 0.9835 - val_loss: 0.0663 - val_accuracy: 0.4599\n","Epoch 22/30\n","135/135 [==============================] - 1s 5ms/step - loss: 0.0021 - accuracy: 0.9842 - val_loss: 0.0681 - val_accuracy: 0.4442\n","Epoch 23/30\n","135/135 [==============================] - 1s 5ms/step - loss: 0.0021 - accuracy: 0.9835 - val_loss: 0.0684 - val_accuracy: 0.4455\n","Epoch 24/30\n","135/135 [==============================] - 1s 5ms/step - loss: 0.0019 - accuracy: 0.9854 - val_loss: 0.0666 - val_accuracy: 0.4560\n","Epoch 25/30\n","135/135 [==============================] - 1s 5ms/step - loss: 0.0019 - accuracy: 0.9851 - val_loss: 0.0668 - val_accuracy: 0.4625\n","Epoch 26/30\n","135/135 [==============================] - 1s 5ms/step - loss: 0.0019 - accuracy: 0.9854 - val_loss: 0.0666 - val_accuracy: 0.4573\n","Epoch 27/30\n","135/135 [==============================] - 1s 5ms/step - loss: 0.0019 - accuracy: 0.9856 - val_loss: 0.0669 - val_accuracy: 0.4520\n","Epoch 28/30\n","135/135 [==============================] - 1s 5ms/step - loss: 0.0020 - accuracy: 0.9842 - val_loss: 0.0648 - val_accuracy: 0.4731\n","Epoch 29/30\n","135/135 [==============================] - 1s 5ms/step - loss: 0.0019 - accuracy: 0.9856 - val_loss: 0.0667 - val_accuracy: 0.4678\n","Epoch 30/30\n","135/135 [==============================] - 1s 5ms/step - loss: 0.0018 - accuracy: 0.9858 - val_loss: 0.0669 - val_accuracy: 0.4534\n"]}]},{"cell_type":"code","metadata":{"id":"_Bgva4jtKzZd","colab":{"base_uri":"https://localhost:8080/","height":337},"executionInfo":{"status":"ok","timestamp":1655896958880,"user_tz":-360,"elapsed":588,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"c7af7537-2f0e-4a9f-fd80-eecff97b02b2"},"source":["plot_history(history.history)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 864x360 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"gcfjEQCuNx5g"},"source":["# Pretrained"]},{"cell_type":"code","metadata":{"id":"cDXBKwEON_7C"},"source":["from gensim.models import Word2Vec\n","model = Word2Vec.load(\"/content/drive/MyDrive/mode_imp_AED 25GPU/w2vModel\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"28JWt0kGLbEO"},"source":["import numpy as np\n","\n","def create_embedding_matrix(model, word_index, embedding_dim):\n","    vocab_size = len(word_index) + 1  # Adding again 1 because of reserved 0 index\n","    embedding_matrix = np.zeros((vocab_size, embedding_dim))\n","\n","   \n","    for word in word_index:\n","        if word in model.wv.vocab:\n","            idx = word_index[word] \n","            embedding_matrix[idx] = np.array(\n","                vector, dtype=np.float32)[:embedding_dim]\n","\n","    return embedding_matrix"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3TlDkPERN013"},"source":["# /content/drive/My Drive/nlp/emotion/word2vec/bengali_word2vec.model"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"2WzzLJoSsPSy","colab":{"base_uri":"https://localhost:8080/","height":321},"executionInfo":{"status":"error","timestamp":1655902267102,"user_tz":-360,"elapsed":1087,"user":{"displayName":"GOLAM SARWAR MD MURSALIN 1604014","userId":"13761940690124268631"}},"outputId":"1526f403-463d-477a-860f-50a21c75e3fe"},"source":["embedding_dim = 50\n","embedding_matrix = create_embedding_matrix(model,\n","                                          tokenizer.word_index, \n","                                          embedding_dim)"],"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-143-6c9be663cc48>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m embedding_matrix = create_embedding_matrix(model,\n\u001b[1;32m      3\u001b[0m                                           \u001b[0mtokenizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mword_index\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m                                           embedding_dim)\n\u001b[0m","\u001b[0;32m<ipython-input-142-9723608c4d08>\u001b[0m in \u001b[0;36mcreate_embedding_matrix\u001b[0;34m(model, word_index, embedding_dim)\u001b[0m\n\u001b[1;32m     10\u001b[0m             \u001b[0midx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mword_index\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mword\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m             embedding_matrix[idx] = np.array(\n\u001b[0;32m---> 12\u001b[0;31m                 vector, dtype=np.float32)[:embedding_dim]\n\u001b[0m\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0membedding_matrix\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'vector' is not defined"]}]},{"cell_type":"code","metadata":{"id":"ikQjJwpDtJyc","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1596131700322,"user_tz":-360,"elapsed":1445,"user":{"displayName":"AVISHEK DAS 1504018","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhU-j0wNDmKHB4Gpe2iUu9qEuJeC47SwpemJ5m05g=s64","userId":"01928616202271817774"}},"outputId":"b3195431-f5b0-47e4-e549-3229d6e99a8f"},"source":["embedding_matrix.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(33516, 50)"]},"metadata":{"tags":[]},"execution_count":66}]},{"cell_type":"code","metadata":{"id":"q6OGg0xCta6i","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1596131687332,"user_tz":-360,"elapsed":1449,"user":{"displayName":"AVISHEK DAS 1504018","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhU-j0wNDmKHB4Gpe2iUu9qEuJeC47SwpemJ5m05g=s64","userId":"01928616202271817774"}},"outputId":"7dd5b5e0-fd80-4cd9-cbe8-2b1e4b7b266d"},"source":["nonzero_elements = np.count_nonzero(np.count_nonzero(embedding_matrix, axis=1))\n","nonzero_elements / vocab_size"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.2032"]},"metadata":{"tags":[]},"execution_count":65}]},{"cell_type":"code","metadata":{"id":"v-W4MRaNwYLC","colab":{"base_uri":"https://localhost:8080/","height":286},"executionInfo":{"status":"ok","timestamp":1596129969140,"user_tz":-360,"elapsed":9517,"user":{"displayName":"AVISHEK DAS 1504018","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhU-j0wNDmKHB4Gpe2iUu9qEuJeC47SwpemJ5m05g=s64","userId":"01928616202271817774"}},"outputId":"c4e7ae46-8691-4435-94bf-b31999bf9068"},"source":["model = Sequential()\n","model.add(layers.Embedding(vocab_size, embedding_dim, \n","                           weights=[embedding_matrix], \n","                           input_length=maxlen, \n","                           trainable=False))\n","model.add(layers.GlobalMaxPool1D())\n","model.add(layers.Dense(10, activation='relu'))\n","model.add(layers.Dense(6, activation='softmax'))\n","model.compile(optimizer='adam',\n","              loss='categorical_crossentropy',\n","              metrics=['accuracy'])\n","model.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding_1 (Embedding)      (None, 213, 300)          10054800  \n","_________________________________________________________________\n","global_max_pooling1d_1 (Glob (None, 300)               0         \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 10)                3010      \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 6)                 66        \n","=================================================================\n","Total params: 10,057,876\n","Trainable params: 3,076\n","Non-trainable params: 10,054,800\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nwYEFysQwl5X"},"source":["history = model.fit(X_train, y_train,\n","                    epochs=50,\n","                    verbose=False,\n","                    validation_data=(X_test, y_test),\n","                    batch_size=10)\n","loss, accuracy = model.evaluate(X_train, y_train, verbose=False)\n","print(\"Training Accuracy: {:.4f}\".format(accuracy))\n","loss, accuracy = model.evaluate(X_test, y_test, verbose=False)\n","print(\"Testing Accuracy:  {:.4f}\".format(accuracy))\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1s25V6dUwv0Y","colab":{"base_uri":"https://localhost:8080/","height":337},"executionInfo":{"status":"ok","timestamp":1596131390470,"user_tz":-360,"elapsed":1824,"user":{"displayName":"AVISHEK DAS 1504018","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhU-j0wNDmKHB4Gpe2iUu9qEuJeC47SwpemJ5m05g=s64","userId":"01928616202271817774"}},"outputId":"1f6727c9-3971-4b49-d924-bb7a5a19172d"},"source":["plot_history(history)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 864x360 with 2 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"YOIl9dtm2CxE"},"source":[""],"execution_count":null,"outputs":[]}]}